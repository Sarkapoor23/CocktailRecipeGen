import openai
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Retrieve the OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

def generate_cocktail_recipe(ingredients, cocktail_type):
    """
    Generates a cocktail recipe based on the available ingredients and desired cocktail type.

    Parameters:
    - ingredients (list): List of ingredients the user has.
    - cocktail_type (str): Type of cocktail the user wants.

    Returns:
    - recipe (str): A text of the cocktail recipe.
    """
    prompt = f"""
    You are a mixologist. Based on the following ingredients: {', '.join(ingredients)},
    and the desired cocktail type: {cocktail_type}, generate a cocktail recipe.
    The output should include:
    1. The name of the cocktail.
    2. The full list of ingredients with measurements.
    3. A step-by-step guide to preparing the cocktail.
    """
    
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a knowledgeable mixologist."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=500
    )
    
    recipe = response['choices'][0]['message']['content']
    return recipe

def parse_recipe_for_steps(recipe_text):
    """
    Parses the recipe text and extracts individual steps for image generation.

    Parameters:
    - recipe_text (str): The text of the recipe generated by GPT-4.

    Returns:
    - steps (list): A list of parsed steps for the recipe.
    """
    # Extract steps assuming they are in a numbered list
    steps = []
    lines = recipe_text.split("\n")
    for line in lines:
        if line.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')):
            steps.append(line.strip())
    return steps

def generate_step_image(step_description):
    """
    Generates an image for a specific recipe step using DALL-E 2.

    Parameters:
    - step_description (str): The description of the step for image generation.

    Returns:
    - image_url (str): The URL of the generated image.
    """
    prompt = f"Generate an illustration for the following cocktail preparation step: {step_description}"
    response = openai.Image.create(
        prompt=prompt,
        n=1,
        size="1024x1024"
    )
    image_url = response['data'][0]['url']
    return image_url

if __name__ == "__main__":
    # Example user inputs
    user_ingredients = ["vodka", "orange juice", "grenadine"]
    user_cocktail_type = "sweet and fruity"

    # Generate cocktail recipe
    cocktail_recipe = generate_cocktail_recipe(user_ingredients, user_cocktail_type)
    print("Generated Recipe:\n", cocktail_recipe)

    # Parse steps for image generation
    steps = parse_recipe_for_steps(cocktail_recipe)
    print("\nParsed Steps for Image Generation:")
    
    for i, step in enumerate(steps, 1):
        print(f"Step {i}: {step}")
        # Generate image for each step
        image_url = generate_step_image(step)
        print(f"Image URL for Step {i}: {image_url}")